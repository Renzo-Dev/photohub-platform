worker_processes 1;

events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen 80;

        # Auth Service (без проверки токена)
        location /api/auth/ {
            proxy_pass         http://photohub_auth_service:9000;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        # Media Service (JWT защита)
        location /api/media/ {
            auth_request /auth_verify;
            error_page 401 = @error401;

            proxy_pass         http://photohub_media_service:9000;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   Authorization $http_authorization;
        }

        # ML Service (JWT защита)
        location /api/ml/ {
            auth_request /auth_verify;
            error_page 401 = @error401;

            proxy_pass         http://photohub_ml_service:9000;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   Authorization $http_authorization;
        }

        # Internal location — запрос на валидацию токена через auth_service
        location = /auth_verify {
            internal;
            proxy_pass         http://photohub_auth_service:9000/api/auth/validate;
            proxy_pass_request_body off;
            proxy_set_header   Content-Length "";
            proxy_set_header   X-Original-URI $request_uri;
            proxy_set_header   Authorization $http_authorization;
        }

        location @error401 {
            add_header Content-Type application/json;
            return 401 '{"error":"Unauthorized"}';
        }

        location / {
            return 404 '{"error":"Not found"}';
            add_header Content-Type application/json;
        }
    }
}